Start face_example
device: cuda
cond_y: 933
loading model...
Setting up [LPIPS] perceptual loss: trunk [alex], v[0.1], spatial [off]
Loading model from: /workspace/.miniconda3/lib/python3.11/site-packages/lpips/weights/v0.1/alex.pth
Setting up [LPIPS] perceptual loss: trunk [vgg], v[0.1], spatial [off]
Loading model from: /workspace/.miniconda3/lib/python3.11/site-packages/lpips/weights/v0.1/vgg.pth
Betas step 1000
[0, 53, 105, 158, 210, 263, 315, 368, 421, 473, 526, 578, 631, 684, 736, 789, 841, 894, 946, 999]
20
Timestep number: 1000
Timestep number: 20
loading state
sampling...
eval_name: paper_face_mask
loading dataloader...
tensor([933], device='cuda:0')
tensor([933], device='cuda:0')
classes: tensor([933], device='cuda:0') cheeseburger
loading state.npy
loading state.npy
loaded state.npy
Extracting beta: tensor([4], device='cuda:0') torch.Size([1, 3, 256, 256]) tensor([[[[0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          ...,
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786]],

         [[0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          ...,
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786]],

         [[0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          ...,
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786]]]],
       device='cuda:0')
Extracting beta: tensor([5], device='cuda:0') torch.Size([1, 3, 256, 256]) tensor([[[[0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          ...,
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260]],

         [[0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          ...,
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260]],

         [[0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          ...,
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260]]]],
       device='cuda:0')
Extracting beta: tensor([4], device='cuda:0') torch.Size([1, 3, 256, 256]) tensor([[[[0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          ...,
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786]],

         [[0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          ...,
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786]],

         [[0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          ...,
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786],
          [0.1786, 0.1786, 0.1786,  ..., 0.1786, 0.1786, 0.1786]]]],
       device='cuda:0')
Extracting beta: tensor([5], device='cuda:0') torch.Size([1, 3, 256, 256]) tensor([[[[0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          ...,
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260]],

         [[0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          ...,
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260]],

         [[0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          ...,
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260],
          [0.2260, 0.2260, 0.2260,  ..., 0.2260, 0.2260, 0.2260]]]],
       device='cuda:0')

LPIPS for 000000.png
resizing to 64x64
SSIM for (64, 64, 3) (64, 64, 3)
sampling complete
